name: Build + Release
on:
  push:
    branches:
      - build/github-actions
    tags:
      - 'v*.*.*'

jobs:
    # TODO deb build that includes resources
    # - name: Pack bandcamp_downloader .deb package
    #   run: cargo deb --no-build

    # - name: Rename bandcamp_downloader .deb package
    #   run: mv target/debian/*.deb target/debian/bandcamp_downloader-x86_64-debian-linux-gnu.deb

    # - name: Archive bandcamp_downloader .deb package
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: bandcamp_downloader-x86_64-debian-linux-gnu
    #     path: target/debian/bandcamp_downloader-x86_64-debian-linux-gnu.deb

  binary_build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macOS-latest
          - ubuntu-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macOS-latest
            target: x86_64-apple-darwin
            mac_target: 10.14
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v1

      - name: Install cargo-deb
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-deb

      - name: Install ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          export DEBIAN_FRONTED=noninteractive
          sudo apt-get -qq update
          sudo apt-get install -y libxkbcommon-dev

      - name: Checkout
        uses: actions/checkout@master

      - name: Enable Link Time Optimizations
        run: |
          echo "[profile.release]" >> Cargo.toml
          echo "lto = true" >> Cargo.toml

      - name: Enable static CRT linkage
        if: matrix.os == 'windows-latest'
        run: |
          mkdir .cargo
          echo '[target.x86_64-pc-windows-msvc]' >> .cargo/config
          echo 'rustflags = ["-Ctarget-feature=+crt-static"]' >> .cargo/config

      - name: Build bandcamp_downloader binary
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.mac_target }}
        run: cargo build --verbose --release --locked

      - name: Create release dir
        shell: bash
        run: |
          mkdir release_bin
          cp -r intl release_bin/
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/release/bandcamp_downloader.exe release_bin/
          else
            cp target/release/bandcamp_downloader release_bin/
          fi
          if [ "${{ matrix.os }}" = "macOS-latest" ]; then
          chmod +x release_bin/bandcamp_downloader
          fi

      - name: Archive binary
        uses: actions/upload-artifact@v1
        with:
          name: bandcamp_downloader-${{ matrix.target }}
          path: release_bin/

  # see https://github.com/orhun/git-cliff-action#examples
  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.release.outputs.RELEASE_BODY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        id: git-cliff
        with:
          config: cliff.toml
          # very verbose, latest tag, no header
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Set the release body
        id: release
        shell: bash
        run: |
          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
          r="${r//'%'/'%25'}"     # Multiline escape sequences for %
          r="${r//$'\n'/'%0A'}"   # Multiline escape sequences for '\n'
          r="${r//$'\r'/'%0D'}"   # Multiline escape sequences for '\r'
          echo "::set-output name=RELEASE_BODY::$r"

  # see https://github.com/marketplace/actions/create-release
  create_release:
    needs:
      - binary_build
      - changelog
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "bandcamp_downloader-*"
          body: ${{ needs.changelog.outputs.release_body }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          allowUpdates: true
          artifactErrorsFailBuild: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
